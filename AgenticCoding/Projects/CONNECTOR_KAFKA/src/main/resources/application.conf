pekko {
  actor {
    provider = local
    
    allow-java-serialization = on
    
    serializers {
      jackson-json = "org.apache.pekko.serialization.jackson.JacksonJsonSerializer"
      jackson-cbor = "org.apache.pekko.serialization.jackson.JacksonCborSerializer"
    }
    
    serialization-bindings {
      "com.example.connectorkafka.model.KafkaEvent" = jackson-json
      "com.example.connectorkafka.model.EventCommand" = jackson-json
      "com.example.connectorkafka.model.EventResponse" = jackson-json
      "com.example.connectorkafka.model.EventConsumerState" = jackson-json
    }
  }
  
  loglevel = "INFO"
  stdout-loglevel = "INFO"
  
  kafka {
    producer {
      discovery-method = pekko.discovery
      service-name = ""
      resolve-timeout = 3 seconds
      parallelism = 10000
      close-timeout = 60s
      close-on-producer-stop = true
      use-dispatcher = "pekko.kafka.default-dispatcher"
      eos-commit-interval = 100ms
      
      kafka-clients {
        client.id = "kafka-producer"
        compression.type = "gzip"
        batch.size = 16384
        linger.ms = 10
        acks = "all"
        max.in.flight.requests.per.connection = 5
        retries = 3
      }
    }
    
    consumer {
      discovery-method = pekko.discovery
      service-name = ""
      resolve-timeout = 3 seconds
      poll-interval = 50ms
      poll-timeout = 50ms
      stop-timeout = 30s
      close-timeout = 20s
      commit-timeout = 15s
      commit-time-warning = 1s
      commit-refresh-interval = infinite
      use-dispatcher = "pekko.kafka.default-dispatcher"
      
      kafka-clients {
        enable.auto.commit = false
        auto.offset.reset = "earliest"
        session.timeout.ms = 30000
        heartbeat.interval.ms = 3000
        max.poll.records = 500
        max.poll.interval.ms = 300000
      }
      
      wait-close-partition = 500ms
      position-timeout = 5s
      offset-for-times-timeout = 5s
      metadata-request-timeout = 5s
      eos-draining-check-interval = 30ms
      partition-handler-warning = 5s
      
      connection-checker {
        enable = false
        max-retries = 3
        check-interval = 15s
        backoff-factor = 2.0
      }
    }
    
    committer {
      max-batch = 1000
      max-interval = 10s
      parallelism = 100
      delivery = WaitForAck
      when = OffsetFirstObserved
    }
    
    default-dispatcher {
      type = "Dispatcher"
      executor = "thread-pool-executor"
      
      thread-pool-executor {
        fixed-pool-size = 16
      }
    }
  }
}

kafka {
  bootstrap.servers = "localhost:9092,localhost:9093,localhost:9094"
}